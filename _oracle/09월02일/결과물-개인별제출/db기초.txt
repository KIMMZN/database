oracle sql (version 11g)
사용자명 : system
비밀번호 : 11111111

db: 자료를저장
     (영구적)
    

- 관계형데이터베이스
  (도구) oracle -- 유료
          mysql
          maria
          mssql


ex)저장할 자료 ㅡ 고객의 정보

번호 이름  나이 주소 전화번호   성별(추가시)
-----------------------------
1    길동이 32 서울   010             
2    홍길동 65 수원   010
3    가오가 21 서울   010
3    박기수 --- > 무결성위배, 번호가 3이 중복
 : 현재 로우(행): 3, 컬럼(열) : 5

db : 자료를 저장하는곳
* 자료를 영구적으로 저장하기 위해 관계형데이터베이스를 사용한다.

+릴레이션은 테이블
로우 컬럼으로 이루어져 있다
컬럼은 속성을 지정할수 있고 제약조건을 걸수있다.
제약조건은 not null . check, unique


(정형데이터)관계형데이터베이스 용어 			 /// 비정형데이터는 빅데이터
**릴레이션(테이블) ㅡ 전체
: 행과 열로 만들어 짐.
  row  colum(속성,제약조건                                 
  ㅣ 
   로우 ㅡ> 저장할 대상의 자료

colum, 속성에서
 :: 더하기 빼기 가능하면 숫자로.
:: 더하기 빼기 불가능하면 문자로 처리하면 얼추 맞는다.

 colum(속성,제약조건) 
colcum, 제약조건 :: not null . check . unique
colcum, 제약조건 : not null ㅡ> 반드시 입력해야한다.
	           check ㅡ > 여기 있는 값 체크 하겠다. (성별 남녀 체크)
		unique ㅡ>ex. (번호 중복금지), unique한 컬럼 // colum을 유니크하게 만드는것 그러니 자연스럽게 로우도 유니크해진다.

릴레이션을 만든다는것을 colum을 만든다는것이다.

개념적인 모델링: *테이블을 아직 생성하진 않고 개념적으로 생각만한것
--------------------------------------------------------------------
--------------------------------------------------------------------
테이블 만들기
번호 이름  나이 주소 
-----------------------------
1    길동이 32 서울                
2    홍길동 65 수원   
3    가오가 21 서울   
3    박기수 --- >

Create table 고객의정보 (              			//절때 한글로 하면 안됨.
번호 number, unique key,		         -- 유니크한 번호로 만듬.
이름 varchar2(6), not null,                         --not null : must, ---- 한글은 3(2바이트)글자, 영어는 6(1바이트)글자 
나이 number(2), default 1,                        ------- 디폴트값 1지정. 기본값 1갖고 시작;
주소, varchar2(50))
);

-------

SQL> create table aaa(
  2  no number,
  3  name varchar2(2)
  4  );


명령어
create table : 테이블을 만든다

desc : 만들어진 테이블의 구조 확인
ex) desc aaa;

----
insert  < ㅡㅡ 로우 추가
ex) insert into aaa values (1, 'krmtr');
but// varchar2(2)가 2라서 5글자는 생성불가
ex) insert into aaa values (1, 'kk');	

select            
ex) select * from aaa;
         ㅣ
          n
SQL> select * from aaa;

        NO NA
----------  --
         1   kk                              -행 추가됨.


---------------------------
**************************


SQL> create table member00 (
  2  empno number(4) unique,
  3  ename varchar2(10) not null,
  4  sal number(5) check(sal between 500 and 5000),
  5  gender varchar2(1) check (gender in ('M', 'F')),
  6  epoint number(3) default 1);

테이블이 생성되었습니다.

SQL> desc member00;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 EMPNO                                              NUMBER(4)
 ENAME                                     NOT NULL VARCHAR2(10)
 SAL                                                NUMBER(5)
 GENDER                                             VARCHAR2(1)
 EPOINT                                             NUMBER(3)

SQL> insert into member00 values (1, 'hong', 600, 'M', 10);

1 개의 행이 만들어졌습니다.

SQL> insert into member00 values (2, 'lee', 900, 'F', default);

1 개의 행이 만들어졌습니다.

SQL> select * from member00;

     EMPNO ENAME          SAL G     EPOINT
---------- ---------- ---------- - ----------
         1 hong              600 M         10
         2 lee                 900 F           1

----------------------------------------------------
08-27 (oracle, day 02)

CRUD

C : row insert
R : ROW SELECT
u: row update
d : row delete
create read update delete

row - crud와 관련이있다.
column - 속성, 제약조건과 관련이있다,

+ 키 : 칼럼에 부여하는 기능
키의 종류: 기본키, 외래키
**기본키(primary key): 튜플(row)을 유일하게 식별, 기본키로 index(색인)를 형성하여 저장한다. null 불가하다. ** (유일성, 속도향상,null불가)
				          ㅡ> 검색속도가 향상
인덱스를 형성하면 검색속도가 향상.

-------------------------------------------------------
1번문제) primary key 이용
member
이름 주소 전화번호                +id 
홍길동 서울 1111                    a
도우너 서울 1111                    b
홍길동 수원 2222                    c
---

**튜플을 유일하게 식별할수 있어야만
갱신 이상 현상과 삭제이상현상을 해결할수 있다.


ㅡㅡ> 업데이트할때 갱신이상 현상이 발생할수있다.
        원인은 ? 튜플을 유일하게 식별할수가 없어서 문제가 생긴다.

ㅡㅡ> delete할때 삭제이상현상이 발생할수 있다.
         원인은 ? 튜플을 유일하게 식별할수가 없어서 문제가 생긴다.

id를 집어 넣어서 유니크하게 하면 튜플을 유일하게 식별할수 있어서
문제 해결.

1번문제) 해결
create table m(
id varchar(1)       primary key,
name v(2),
address v(10),
phonnum v(13));

----------------------------------------------
2번) 
자동차등록
이름      자동차 넘버    전번
홍길동    1111            1234
홍길동    2222            1234
crud

2) 해결 // 테이블 분리
자동차등록
(pk)			    (외래키)
 id 이름 전번     l           카번호      id
 a 홍길동 1234  ㅣ             1          a 
 b 홍      2222  l               2          a

외래키는 pk(기본키)를 참조한다.
외래키는 카번호가 소유하고있다. (분리된 테이블)
외래키 : 자식 릴레이션의 외래키는 부모 릴레이션의 특정 컬럼을 참조한다.
*자식이 참조하는 부모 릴레이션은 무조건 유니크(유일성)해야한다.
기본키는 테이블당 1개씩만 설정할수있다.

칼럼 to 칼럼
ㅡ        ㅡ
외래키   참조대상


데이터 설계시
이상현상을 방지하기 위해서 고려 해야될것
1) 유일성 (기본키)pk
2)데이터의 중복 최소화 (정규화,외래키사용)
정규화 : 테이블 분리
-----------------------------------------------------
primary key 활용

member table
id: 8글자, 기본키,
name: 한글5글자,
tel: 13글자

create table member (
id varchar2(8), primary key,
name varchar2(10),
tel number(13)) ;

--------------------------------
primary key 활용에 외래키 활용

car table
carnum : 4글자
id : 8글자, 외래키(참조하는정보-member릴레이션의 id컬럼)

create table car (
carnum number(4),
id varchar2(8),
foreign key(id) references member(id));

//
create table car (
carnum number(4),
id varchar2(8),
constraint fk_member_id foreign key(id) references member (id)); 
이렇게 만들어도 된다

foreign key(id)
//fk_meber_id 자식키에 새로운 이름을 지정해서 관리
//이름이 없는 위의 커리문은 오라클이 알아서 이름을 지정한다.

-- constraint [fk명] foreign ([fk가 될 칼럼명]) reference [fk로 연결할 pk가 위치한 부모테이블] ([pk칼럼명])

----------------------------------------------
 8 5 13
1.o
2.o
3.o
4.o
5.o
6.x ------- 외래키 제약조건을 위배

7. o
8. o

9. o
10.  x
11 o

12. x
13. o
14. o

외래키는 칼럼 to 칼럼의 관계이다.


//
//update는 set이 필수
update sugang set name ~ where 
update sugang set subcode= 'c04' where userid = 'bbb';
userid bbb인 로우의 subcode 를 'c04'로

update sugang set subcode = '' where userid = 'aaa' and subcode ='c03';

//delete는 from
delete from stu where~
//

--------------------------------------------------------------------------
08 - 28
------------------------------------------------------------------------

** ERD  - 개념적 설계** (Entity Relationship Diagram)
E : 개체 : 독립적존재할수있는대상
R : 관계 : 1:1 , 1:N, N:M

*ERD (개념적설계) ㅡ> 논리적설계 ㅡ > 물리적설계
                            (테이블명세서)   (쿼리문)



( l고객l) ----------------------------<출석> ---------------------------- (l출석대장l)
 |     |                                     공통점                                        |
(ID) (NAME)                                                                          (시간)


교수는 id 이름.
교수는 논문을 작성
논문은 작성일 아이디만저장;

개체 분석
l교수l                     -------<작성>--------           l논문l
(아이디^)(이름)                                        (작성일) (아이디)
하면서 기본키는 표시, ^로 표시함

관계 분석



시나리오1
고객관리
고객은 아이디와 이름, 성별, 포인트로 구성된다.
아이디는 8글자이며, 중복된 아이디는 사용할 수 없다.
이름은 한글로 최대 5글자 이며 성별은 남과 여로 저장한다.
포인트는 최대 9999.99까지 저장할 수 있다.

고객은 출석도장을 찍을 수 있다.
출석도장은 날짜를 저장한다.
고객은 하루에 여러번 출석도장을 찍을 수 있다. 


( l고객l) l----------------------------<출석> ----------------------------< (l출석시간l)
 |     |                                     공통점                                        |
(ID) (NAME)                                                                          (시간)


관계 표시1:N  = = 1  ------- 
o : 버블  : 무조건 아님. 출석해도되고 안해도되고(무조건 출석할 필요없음)
o 안붙으면 무조건 강제성 (무조건출석)



시나리오2
고객관리
고객은 아이디와 이름, 성별, 포인트로 구성된다.
아이디는 8글자이며, 중복된 아이디는 사용할 수 없다.
이름은 한글로 최대 5글자 이며 성별은 남과 여로 저장한다.
포인트는 최대 9999.99까지 저장할 수 있다.

고객은 이벤트에 참여 할 수 있다. 
이벤트는 별도의 테이블에 저장한다.
이벤트 번호는 숫자3개의 조합이다. 
이벤트 번호와 이벤트 이름과 날짜를 저장한다.

고객만 이벤트에 참여 가능하고
이벤트는 현재 계획된 이벤트만 신청이 가능하다.


<한사람 여러개 이벤트 참여가능
하나의 이벤트는 여러개의 고객으로 진행>

날짜 : timestamp
1:n
n : 1
n:m


'ㅡ'는 실선;
-----                                                       -------
l고객l ㅡ>oㅡㅡㅡㅡㅡ<참여>ㅡㅡㅡㅡㅡㅡo<ㅡ l이벤트l
-----                     |                                 -------
|                                ㅣ                                  |  
(id_)|                          (신청사연)                      (이벤트 번호_)  |      
   (이름)|                                                                 (이벤트 이름)  |
      (성별)|                                                                         (이벤트날짜)
           (포인트)



외래키 제약조건
set null
set cascade

//고객
create table clienta (
id varchar2(8) primary key,
name varchar2(10),
gender varchar2(2) check (gender in ('남', '녀')),
point number(6,2));

//이벤트
create table eventa (
eventnum varchar2(3) primary key,
eventname varchar2(20),
eventdate timestamp);

//참여
create table app (
appnum varchar2(3) primary key,
id varchar2(8)
eventnum varchar2(3)
appstory varchar2(100),
constraint fk_client_id foreign key(id) references clienta (id)
on delete cascade,      //(clienta의 id칼럼이 삭제되면 자식 튜플도 삭제한다) .  부모가 삭제되면 자기자신도 삭제해라.                                 ㅡㅡㅡㅡㅡ
constraint fk_client_event foreign key(eventnum)  references eventa(eventnum)
on delete set null	    //(eventa 테이블의 eventnum이라는 칼럼이 삭제되면 자식 릴레이션의 외래키인 eventanum의 값을 null로 설정하겟다); , 부모가 삭제되더라도 자기자신은 null로 설정하겟다.

);
 

ex ++)
---- 외래키 제약조건
on delete set null,  //부모릴레이션에 참조하고 있는 id가 삭제되면 자식릴레이션 외래키 속성이 null
on delete cascade//부모릴레이션에 참조하고 있는 scode가 삭제되면 자식릴레이션 튜플도 삭제
);

----------------------------
오전실습0828
------------------------------
create table e_user(
id varchar2(8) primary key,
name varchar2(10),
gender varchar2(2) check (gender in('남','녀')),
point number(6,2));

create table event(
e_num varchar2(3) primary key,
e_name varchar2(10),
e_day timestamp);

create table event_join(
join_num varchar2(3) primary key,
id varchar2(8),
e_num varchar2(3),
message varchar2(10),
constraint fk_event_join_id foreign key (id) references e_user(id)
on delete cascade,
constraint fk_event_join_e_num foreign key (e_num) references event(e_num)
on delete set null);

// e_user에 2명의 학생 입력하기
insert into e_user values ('111','hong','남',33.33);
insert into e_user values ('222','lee','녀',33.33);

//// event에 2개의 이벤트 등록하기
insert into event values ('e01','c강의','2024/09/09');
insert into event values ('e02','html강의','2024/09/10');

//이벤트 신청하기
insert into event_join values('j01','111','e01','취업');
insert into event_join values('j02','111','e02','취업');
insert into event_join values('j03','222','e02','교양');

//이벤트 중에 html강의 삭제하기
delete from event where e_num = 'e02';

//고객 아이디가 222인 사람 삭제하기
delete from e_user where id='222';


create table tempn (
tempno varchar2(20) not null
);

insert into tempn values ('헬로우 월드');


create table tempa1 (
t_id varchar2(20) primary key,
t_name varchar2(20) not null,
t_phonnum number(13) not null,
t_addr varchar2(30) default '서울'
);

create table mmm(
no number(3) primary key,
name varchar2(10),
gender varchar2(1) check (gender in ('M','F'))
);

.//

개발환경
dbms , oracle 11g 사용

localhost
ip:주소
포트넘버: 프로그램주소

//

update tablename
delete from tablename
insert into tablename
alter table tablename


//// 0902
릴레이션(테이블), 튜플(row), 칼럼

hm릴레이션의 point column의  값이 50이하인 튜플의 count

hm릴레이션의 point column의 값이 50이하인 튜플을 모두 출력 ,point가 높은 순서대로

1. 집계함수, 정렬

/
****
*select : 화면에 출력할때 선택하는 속성.
from : 대상 테이블
*where : 튜플선정조건
order by : 정렬
****


ex)
create table hm(
no number(3) primary key,
name varchar2(10) not null,
point number(5) default 0,
addr varchar2(20),
indate timestamp default sysdate);

insert into hm values (1,'홍길동',45,'서울시',default);
insert into hm values (2,'일지매',50,'수원',default);
insert into hm values (3,'이지매',43,'서울',default);

hm릴레이션의 point column의 값이 50이하인 튜플을 모두 출력 ,point가 높은 순서대로

a : select *
b : from : hm
c : where : point <50
d : order by: point desc 오름차순
                     asc 내림차순

** 실행 순서는 b c a d 이다. 중요하니 알아두자.
해결할때도 실행순서대로 하자.



-함수 : 실행후 결과를 리턴해줌

/// 정리**************0902
1.테이블 관리 : create table. drop table, alter table
	     : 테이블(릴레이션), 속성(속성타입, 제약조건)
 	     :타입 - int, number*, varchar2, timestamp
	     :제약 조건 : 유일성(기본키, unique), not null, check, default
	     : 키 - 기본키 - 유일성, not null, 인덱스형성(검색속도 향상
					          -where 절에서 사용)
		외래키 - 컬럼 투 컬럼, 자식 릴레이션 컬림이 부모 릴레이션의 컬럼을 참조한다.
			외래키 제약조건 : cascade, set null
	     : ERD - 개체와 개체의 관계분석 1:1, 1:N, N:M 분석 후 테이블 형성

2. 테이블에 저장된 튜플의 조작
삽입 - insert
갱신 - update : 특정 튜플을 선택하여 갱신하려면 where절 사용
삭제 - delete : 특정 튜플을 선택하여 삭제하려면 where절 사용
검색 - select :  각 절의 의미 암기, 절의 실행 순서 이해
*실행순수 / 절의 의미
      4      select절	: 컬럼선택
      1      from절	: 대상 테이블
      2      where절	: 대상 테이블로부터 튜플을 선정할 조건
      3      group by 절 :  그룹화
      5      order by 절 : 출력할때 정렬

3. 함수 : 함수를 호출하고 함수의 기능을 실행하고 결과값을 리턴, (호출 - 실행 ㅡ 리턴)
	결과값을 리턴받아서 처리 한다... 예를 들어 count(*)함수를 호출하면 튜플의 수를
	카운팅하여 카운팅 결과값을 리턴한다.


/////////////////////
hm테이블에서 작성하시오
1. 이름뒤에 님을 붙혀서 출력하시오. 모든 사람의 이름과 포인트를 출력합니다.
2. 모든 사람의 이름과 포인트와 등록일을 출력합니다.
이때 가입순서에 따라 출력합니다. 가장 나중에 가입한 사람이 제일 먼저 출력
가입날짜는 indate

3. 포인트가 50 이상인 사람의 이름과 정보를 출력합니다.
   정보는 no, 이름, 포인트가 합쳐진 문자열이다.

4. 기준포인트는 60이다. 모든 회원이 기준포인트를 맞추기 위해서 부족한 포인트를 출력하시오.
 출력은 이름 현재포인트 부족한 포인트


예제 ))

create table hm(
no number(3) primary key,
name varchar2(10) not null,
point number(5) default 0,
addr varchar2(20),
indate timestamp default sysdate);

insert into hm values (1,'홍길동',45,'서울시',default);
insert into hm values (2,'일지매',50,'수원',default);
insert into hm values (3,'이지매',43,'서울',default);

select * from hm;
select no,name from hm order by no asc; --asc 내림차순
select count(*) from hm;

-- 1. 이름과 점수만.
-- name, point of hm
select name, point
from hm;

-- 2. 점수 50점 미만인 사람의 이름과 점수.
select name,point
from hm
where point<50;

--3.점수가 50점미만인 사람은 모두 몇명? COUNT
select count(*)
from hm
where point<50;

--4.홍길동의 점수는 몇점 인가?
select point, name
from hm
where name = '홍길동';

--5. 일지매의 모든 정보를 출력하세요.
select *
from hm
where name = '일지매';

select sum(point) as 총함 from hm;

select no, name 이름
from hm
where point <50;

-- 1. 모든학생의 이름과 포인트를 출력합니다.
-- 포인트는 현재 포인트에서 10점 올려서 출력

select name, point+10
from hm;



-- 2.모든 학생의 이름과 포인트를 출력
-- 출력은 이름 현재포인트 가산포인트
--이름은 학생의 이름
--현재포인트는 저장된 포인트
--가산포인트는 +10점 올린 포인트

select name as 이름, point as 현재포인트, point+10 as 가산포인트
from hm
order by point desc;

select * from hm;
update hm set point=100, name ='김티처';
update hm set point=100, name ='김티처' where name ='홍길동';
delete from hm;

--update hm set point=0, name ='홍길동' where name =' ';
delete from hm where name='홍길동';

select concat('이름','님') 이름 from dual;
select sysdate from dual;

--1
select concat(name,'님') 이름, point
from hm;

--2
select name, point, indate
from hm
order by indate desc;

--3
select name as 이름, concat(concat(no,name),point) as 정보 
from hm
where point >=50;

--4 
select point as 현재포인트, 60-point as 부족한포인트
from hm;



//마스킹 방법

주신 SQL 쿼리는 Oracle에서 사용되는 쿼리로, 이름의 첫 글자만 남기고 나머지 부분을 '*'로 마스킹하는 기능을 수행합니다. 아래는 쿼리의 각 부분에 대한 설명입니다:

sql
코드 복사
SELECT 
    SUBSTR(name, 1, 1) || RPAD('*', LENGTH(name) - 1, '*') AS 마스킹_name
FROM 
    users;
쿼리 설명
SUBSTR(name, 1, 1):

SUBSTR 함수는 문자열의 일부분을 추출하는 함수입니다.
첫 번째 인자는 문자열이 있는 컬럼(name)입니다.
두 번째 인자는 추출을 시작할 위치이며, 1은 문자열의 첫 번째 위치를 의미합니다.
세 번째 인자는 추출할 문자 수로, 1은 첫 번째 글자 하나만 추출하겠다는 의미입니다.
따라서, SUBSTR(name, 1, 1)는 이름의 첫 글자만 반환합니다.
RPAD('*', LENGTH(name) - 1, '*'):

RPAD 함수는 지정된 길이까지 오른쪽에 특정 문자를 반복적으로 채워서 문자열을 확장합니다.
첫 번째 인자는 확장할 문자로, 여기서는 '*'입니다.
두 번째 인자는 최종 문자열의 길이로, LENGTH(name) - 1을 사용하여 이름의 길이에서 첫 글자를 제외한 나머지 길이만큼 '*'를 채웁니다.
세 번째 인자는 채울 문자로, 이 경우에도 '*'을 사용하여 나머지 부분을 채웁니다.
|| (문자열 연결 연산자):

|| 연산자는 두 문자열을 연결합니다.
SUBSTR(name, 1, 1)의 결과와 RPAD('*', LENGTH(name) - 1, '*')의 결과를 연결하여, 첫 글자는 그대로 두고 나머지는 '*'로 마스킹된 문자열을 만듭니다.
AS 마스킹_name:

결과 컬럼의 이름을 마스킹_name으로 지정합니다.
예시
만약 name이 "홍길동"이라면:

SUBSTR(name, 1, 1)은 "홍"을 반환합니다.
RPAD('*', LENGTH(name) - 1, '*')은 "길동"의 자리만큼 '*' 두 개를 추가하여 "**"를 만듭니다.
|| 연산자로 "홍"과 ""를 연결하면 "홍"이 됩니다.
이 쿼리를 통해 이름의 첫 글자만 보이게 하고 나머지는 마스킹할 수 있습니다.

------------------------------
**0903

-----------------------------------

내장함수 :프로그램에서 제공
함수
1.함수는 특정 기능을 제공한다
2.함수는 직접 만들 경우도 있고, 만들어진 것을 사용하는 것이 있다.
3. call(호출)  이때 값을 넘겨준다. 이것을 매개변수라고 한다
4. 처리후 return을 해준다.

select lower('abcd') as 소문자
from dual;

lower()함수
1.오라클에서 만들어서 제공하는 내장함수
매개변수의 값을 소문자로 바꾸는 기능
2.lower()는 함수를 call하는 작업, 이때 매개변수로 문자열 'ABCD'전달
3.함수는 결과값 리턴함. 결과 값은 abcd

lower라는 함수를 호출하고 ('abcd')라는 매개변수를 준다.
그후 처리 값을 return 받는다.