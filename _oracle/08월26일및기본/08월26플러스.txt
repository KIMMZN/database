oracle sql (version 11g)
사용자명 : system
비밀번호 : 11111111

db: 자료를저장
     (영구적)
    

- 관계형데이터베이스
  (도구) oracle -- 유료
          mysql
          maria
          mssql




**설명
number(4) 숫자, 총 4자리
unique 유니크, 제약조건, 유일성 (중복불가)
not null 제약 조건, 널(null) 불가, 반드시 입력해야됨(필수입력)
check 제약조건, 주어진 조건에 해당하는 값만 입력가능 
default 제약조건, 기본값으로 설정**



ex)저장할 자료 ㅡ 고객의 정보

번호 이름  나이 주소 전화번호   성별(추가시)
-----------------------------
1    길동이 32 서울   010             
2    홍길동 65 수원   010
3    가오가 21 서울   010
3    박기수 --- > 무결성위배, 번호가 3이 중복
 : 현재 로우(행): 3, 컬럼(열) : 5

db : 자료를 저장하는곳
* 자료를 영구적으로 저장하기 위해 관계형데이터베이스를 사용한다.

관계형 데이터베이스(relational database)란?
관계형 데이터베이스는 현재 가장 많이 사용되고 있는 데이터베이스의 한 종류.
관계형 데이터베이스란 테이블(table)로 이루어져 있으며, 이 테이블은 키(key)와 값(value)의 관계를 나타냄.
이처럼 데이터의 종속성을 관계(relationship)로 표현하는 것이 관계형 데이터베이스의 특징임.


1. 열(column)

각각의 열은 유일한 이름을 가지고 있으며, 자신만의 타입을 가지고 있습니다.

이러한 열은 필드(field) 또는 속성(attribute)이라고도 불립니다.

 

2. 행(row)

행은 관계된 데이터의 묶음을 의미합니다.

한 테이블의 모든 행은 같은 수의 열을 가지고 있습니다.

이러한 행은 튜플(tuple) 또는 레코드(record)라고도 불립니다.

 

3. 값(value)

테이블은 각각의 행과 열에 대응하는 값을 가지고 있습니다.

이러한 값은 열의 타입에 맞는 값이어야 합니다.

 

4. 키(key)

테이블에서 행의 식별자로 이용되는 열을 키(key) 또는 기본 키(primary key)라고 합니다.

즉, 테이블에 저장된 레코드를 고유하게 식별하는 후보 키(candidate key) 중에서 데이터베이스 설계자가 지정한 속성을 의미합니다.

 

5. 관계(relationship)

테이블 간의 관계는 관계를 맺는 테이블의 수에 따라 다음과 같이 나눌 수 있습니다.

 

1. 일대일(one-to-one) 관계

2. 일대다(one-to-many) 관계

3. 다대다(many-to-many) 관계

 

관계형 데이터베이스에서는 이러한 관계를 나타내기 위해 외래 키(foreign key)라는 것을 사용합니다.

외래 키는 한 테이블의 키 중에서 다른 테이블의 행(row)을 식별할 수 있는 키를 의미합니다.

 

+릴레이션은 테이블
로우 컬럼으로 이루어져 있다
컬럼은 속성을 지정할수 있고 제약조건을 걸수있다.
제약조건은 not null . check, unique 등등이 있다


(정형데이터)관계형데이터베이스 용어 			 /// 비정형데이터는 빅데이터
**릴레이션(테이블) ㅡ 전체
: 행과 열로 만들어 짐.
  row  colum(속성,제약조건                                 
  ㅣ 
   로우 ㅡ> 저장할 대상의 자료

colum, 속성에서
 :: 더하기 빼기 가능하면 숫자로.
:: 더하기 빼기 불가능하면 문자로 처리하면 얼추 맞는다.

 colum(속성,제약조건) 
colcum, 제약조건 :: not null . check . unique
colcum, 제약조건 : not null ㅡ> 반드시 입력해야한다.
	           check ㅡ > 여기 있는 값 체크 하겠다. (성별 남녀 체크)
		unique ㅡ>ex. (번호 중복금지), unique한 컬럼 // colum을 유니크하게 만드는것 그러니 자연스럽게 로우도 유니크해진다.

릴레이션을 만든다는것을 colum을 만든다는것이다.

개념적인 모델링: *테이블을 아직 생성하진 않고 개념적으로 생각만한것
--------------------------------------------------------------------
--------------------------------------------------------------------
테이블 만들기
번호 이름  나이 주소 
-----------------------------
1    길동이 32 서울                
2    홍길동 65 수원   
3    가오가 21 서울   
3    박기수 --- >

Create table 고객의정보 (              			//절때 한글로 하면 안됨.
번호 number, unique key,		         -- 유니크한 번호로 만듬.
이름 varchar2(6), not null,                         --not null : must, ---- 한글은 3(2바이트)글자, 영어는 6(1바이트)글자 
나이 number(2), default 1,                        ------- 디폴트값 1지정. 기본값 1갖고 시작;
주소, varchar2(50))
);

-------

SQL> create table aaa(
  2  no number,
  3  name varchar2(2)
  4  );


명령어
create table : 테이블을 만든다

desc : 만들어진 테이블의 구조 확인
ex) desc aaa;

----
insert  < ㅡㅡ 로우 추가
ex) insert into aaa values (1, 'krmtr');
but// varchar2(2)가 2라서 5글자는 생성불가
ex) insert into aaa values (1, 'kk');	

select            
ex) select * from aaa;
         ㅣ
          n
SQL> select * from aaa;

        NO NA
----------  --
         1   kk                              -행 추가됨.


---------------------------
**************************


SQL> create table member00 (
  2  empno number(4) unique,
  3  ename varchar2(10) not null,
  4  sal number(5) check(sal between 500 and 5000),
  5  gender varchar2(1) check (gender in ('M', 'F')),
  6  epoint number(3) default 1);

테이블이 생성되었습니다.

SQL> desc member00;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 EMPNO                                              NUMBER(4)
 ENAME                                     NOT NULL VARCHAR2(10)
 SAL                                                NUMBER(5)
 GENDER                                             VARCHAR2(1)
 EPOINT                                             NUMBER(3)

SQL> insert into member00 values (1, 'hong', 600, 'M', 10);

1 개의 행이 만들어졌습니다.

SQL> insert into member00 values (2, 'lee', 900, 'F', default);

1 개의 행이 만들어졌습니다.

SQL> select * from member00;

     EMPNO ENAME          SAL G     EPOINT
---------- ---------- ---------- - ----------
         1 hong              600 M         10
         2 lee                 900 F           1